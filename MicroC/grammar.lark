
// Gramática para MicroC 

?start:         program

program:        (declaration)*

?declaration:   var_decl 
                | fun_decl

var_decl:       type ID ("=" expression)? ";"
fun_decl:       type ID "(" params ")" block

params:         (param ("," param)*)?
param:          type ID

type:           TYPE_INT | TYPE_BOOL | TYPE_VOID

block:          "{" statement* "}"
?statement:      expr_stmt 
                | block
                | if_stmt 
                | while_stmt 
                | return_stmt
                | var_decl

expr_stmt:      expression ";"
if_stmt:        "if" "(" expression ")" statement ("else" statement)?
while_stmt:     "while" "(" expression ")" statement
return_stmt:    "return" expression? ";"

?expression:     assignment
?assignment:     ID "=" assignment | logic_or
?logic_or:       logic_and (OR logic_and)*
?logic_and:      equality (AND equality)*
?equality:       relational (("==" | "!=" ) relational)*
?relational:     sum (REL_OP sum)*
?sum: term (PLUS term | MINUS term)*
?term:           factor (("*" | "/") factor)*
factor:          INT 
                 | BOOL
                 | "!" factor
                 | ID 
                 | ID "(" [args] ")" -> fun_call      // <- chamada de função
                 | "print" "(" expression ")" -> print_call  // <- chamada print
                 | "(" expression ")"

args: expression ("," expression)*

NOT: "!"
ID: /[a-zA-Z_][a-zA-Z0-9_]*/
BOOL: "true" | "false"
INT: /[0-9]+/

TYPE_INT: "int"
TYPE_BOOL: "bool"
TYPE_VOID: "void"
REL_OP: "<" | ">" | "<=" | ">="

PLUS: "+"
MINUS: "-"
TIMES: "*"
DIVIDE: "/"
EQ: "=="
NE: "!="
LT: "<"
GT: ">"
LE: "<="
GE: ">="
OR: "||"
AND: "&&"
COMMENT: /\/\*(.|\n)*?\*\// //pode ser tirado, mas achei útil
LINE_COMMENT: /\/\/[^\n]*/ // comentários de linha única

%import common.WS
%ignore WS
%ignore COMMENT
%ignore LINE_COMMENT
